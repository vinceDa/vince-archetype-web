#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!--  MyBatis Generator 配置文件的根元素。-->
<generatorConfiguration>
    <!--
    定义一个生成代码的上下文。`id`用于标识该上下文，`targetRuntime`指定生成的代码使用的目标运行时。
    `MyBatis3` 表示生成符合 MyBatis 3.x 的代码。
    -->
    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!-- Example 目标包修改插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ExampleTargetPlugin">
            <!-- 修改Example类生成到目标包下 -->
            <property name="targetPackage" value="${package}.gatewayimpl.database.example"/>
        </plugin>
        <!-- Example Criteria 增强插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ExampleEnhancedPlugin">
            <!-- 是否支持已经过时的andIf方法（推荐使用when代替），默认支持 -->
            <property name="enableAndIf" value="true"/>
        </plugin>
        <!-- MySQL分页插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LimitPlugin">
            <!-- 通过配置startPage影响Example中的page方法开始分页的页码，默认分页从0开始 -->
            <property name="startPage" value="0"/>
        </plugin>
        <!-- Lombok插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.LombokPlugin">
            <!-- @Data 默认开启,同时插件会对子类自动附加@EqualsAndHashCode(callSuper = true)，@ToString(callSuper = true) -->
            <property name="@Data" value="true"/>
            <!-- @Builder 必须在 Lombok 版本 >= 1.18.2 的情况下开启，对存在继承关系的类自动替换成@SuperBuilder -->
            <property name="@Builder" value="false"/>
            <!-- @NoArgsConstructor 和 @AllArgsConstructor 使用规则和Lombok一致 -->
            <property name="@AllArgsConstructor" value="false"/>
            <property name="@NoArgsConstructor" value="false"/>
            <!-- @Getter、@Setter、@Accessors 等使用规则参见官方文档 -->
            <property name="@Accessors(chain = true)" value="false"/>
            <!-- 临时解决IDEA工具对@SuperBuilder的不支持问题，开启后(默认未开启)插件在遇到@SuperBuilder注解时会调用ModelBuilderPlugin来生成相应的builder代码 -->
            <property name="supportSuperBuilderForIdea" value="false"/>
        </plugin>
        <!-- 数据Model属性对应Column获取插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ModelColumnPlugin"/>

        <!-- 自定义注释插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.CommentPlugin">
            <!-- 自定义模板路径 -->
            <property name="template" value="src/main/resources/mybatis/mybatis-generator-comment.ftl" />
        </plugin>

        <!--  配置 JDBC 连接信息，包括驱动类、数据库 URL、用户名和密码。 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/vince"
                        userId="root"
                        password="test123456">
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>
        <!-- 配置生成的 Java Model 类的包路径和生成路径。 `targetPackage` 指定生成的 Java 类所在的包。 `targetProject` 指定生成代码存放的项目路径。 -->
        <javaModelGenerator targetPackage="${package}.gatewayimpl.database.dataobject" targetProject="src/main/java">
            <!-- 配置是否启用子包结构。 如果为 `true`，生成的文件会根据表名放到不同的子包中。 -->
            <property name="enableSubPackages" value="true"/>
            <!-- 配置是否自动去除字符串两端的空格。 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 配置生成的 SQL 映射文件的包路径和生成路径。 `targetPackage` 指定生成的 XML 映射文件所在的包。 `targetProject` 指定生成的映射文件存放的项目路径。 -->
        <sqlMapGenerator targetPackage="mybatis/mapper" targetProject="src/main/resources">
            <!-- 配置是否启用子包结构。 -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--
        配置生成的 Java Client（即 Mapper 接口）的包路径和生成路径。
        `type="XMLMAPPER"` 表示使用 XML 文件配置 SQL 语句。
        `targetPackage` 指定生成的接口类所在的包。
        `targetProject` 指定生成的接口类存放的项目路径。
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${package}.gatewayimpl.database" targetProject="src/main/java">
            <!-- 配置是否启用子包结构。 -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--
        配置生成代码的数据库表信息。
        `tableName` 指定数据库中的表名。 `domainObjectName` 指定生成的 Java 实体类的类名。 `enableUpdateByExample` 表示是否生成基于示例的更新方法。
        -->
        <table tableName="t_user" domainObjectName="UserDO" mapperName="UserMapper"
               enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="true"
                enableUpdateByExample="false">
            <!-- 配置特定列的 Java 类型。 `column` 指定数据库表中的列名。 `javaType` 指定该列对应的 Java 类型。 -->
            <columnOverride column="id" javaType="java.lang.Long" />
            <!-- 如果需要，可以添加更多的列覆盖配置。 -->

        </table>
    </context>
</generatorConfiguration>
